# Movie Genie DVC Pipeline
# Focus: Data processing and ML training only
# Services: Use ./scripts/app.sh instead

stages:
  # ==========================================
  # DATA PIPELINE
  # ==========================================
  
  ingest:
    cmd: .venv/bin/python scripts/ingest_data.py --config configs/data.yaml
    deps:
    - scripts/ingest_data.py
    - configs/data.yaml
    outs:
    - data/raw/ratings.csv
    - data/raw/movies.csv

  sequential_processing:
    cmd: .venv/bin/python scripts/process_sequential_data.py --config configs/data.yaml
    deps:
    - scripts/process_sequential_data.py
    - configs/data.yaml
    - data/raw/ratings.csv
    - data/raw/movies.csv
    outs:
    - data/processed/sequences_with_metadata.parquet

  content_features:
    cmd: .venv/bin/python scripts/extract_content_features.py --config configs/data.yaml
    deps:
    - scripts/extract_content_features.py
    - configs/data.yaml
    - data/raw/movies.csv
    params:
    - configs/data.yaml:
      - processing.embedding_model
    outs:
    - data/processed/content_features.parquet

  # ==========================================
  # MODEL TRAINING
  # ==========================================

  two_tower_training:
    cmd: >
      .venv/bin/python scripts/train_two_tower.py
      --config configs/two_tower.yaml
      --mlflow-config configs/mlflow.yaml
    deps:
    - scripts/train_two_tower.py
    - movie_genie/retrieval/two_tower_model.py
    - configs/two_tower.yaml
    - configs/mlflow.yaml
    - data/processed/sequences_with_metadata.parquet
    - data/processed/content_features.parquet
    params:
    - configs/two_tower.yaml:
      - model.embedding_dim
      - model.user_hidden_dims
      - model.item_hidden_dims
      - training.batch_size
      - training.num_epochs
    outs:
    - models/two_tower:
        cache: false

  bert4rec_training:
    cmd: >
      .venv/bin/python scripts/train_bert4rec.py
      --config configs/bert4rec.yaml
      --mlflow-config configs/mlflow.yaml
    deps:
    - scripts/train_bert4rec.py
    - movie_genie/ranking/bert4rec_model.py
    - configs/bert4rec.yaml
    - configs/mlflow.yaml
    - data/processed/sequences_with_metadata.parquet
    - data/processed/content_features.parquet
    params:
    - configs/bert4rec.yaml:
      - model.hidden_dim
      - model.num_heads
      - model.num_layers
      - training.batch_size
      - training.num_epochs
    outs:
    - models/bert4rec:
        cache: false

  # ==========================================
  # EVALUATION
  # ==========================================

  integrated_evaluation:
    cmd: .venv/bin/python scripts/evaluate_integrated_system.py
    deps:
    - scripts/evaluate_integrated_system.py
    - models/two_tower/
    - models/bert4rec/
    - data/processed/sequences_with_metadata.parquet
    - data/processed/content_features.parquet
    outs:
    - results/integrated_system_evaluation.json
    - results/key_metrics.json

  # ==========================================
  # BUILD (Optional - for production)
  # ==========================================

  frontend_build:
    cmd: >
      cd movie_genie/frontend &&
      npm run build &&
      cp ../backend/dist/index.html ../backend/templates/ &&
      mkdir -p ../backend/static &&
      cp -r ../backend/dist/css ../backend/static/ &&
      cp -r ../backend/dist/js ../backend/static/ &&
      [ -d ../backend/dist/img ] && cp -r ../backend/dist/img ../backend/static/ || true &&
      [ -d ../backend/dist/assets ] && cp -r ../backend/dist/assets ../backend/static/ || true
    deps:
    - movie_genie/frontend/src/
    - movie_genie/frontend/package.json
    - movie_genie/frontend/vite.config.ts
    - movie_genie/frontend/index.html
    - movie_genie/frontend/tailwind.config.ts
    outs:
    - movie_genie/backend/templates/index.html
    - movie_genie/backend/static/
    always_changed: true

# ==========================================
# SERVICE MANAGEMENT
# ==========================================
# Services are managed separately from DVC pipeline:
#
# Production (Docker):
#   docker-compose build
#   docker-compose up -d
#
# Development (Local):
#   python scripts/start_server.py           # Backend (port 5001)
#   cd movie_genie/frontend && npm run dev   # Frontend (port 5173)
#   mlflow ui --host 127.0.0.1 --port 5002   # MLflow UI
#   mkdocs serve                             # Documentation (port 8000)
