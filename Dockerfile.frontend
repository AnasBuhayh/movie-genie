# Movie Genie Frontend Dockerfile
# Multi-stage build for optimized production image

# ==========================================
# Stage 1: Builder
# ==========================================
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY movie_genie/frontend/package*.json ./

# Install dependencies (include dev dependencies for build)
RUN npm ci && \
    npm cache clean --force

# Copy source code
COPY movie_genie/frontend/ ./

# Build arguments for API URL
ARG VITE_API_URL=http://localhost:5001/api
ENV VITE_API_URL=$VITE_API_URL

# Build application (override outDir and base for Docker)
RUN npm run build -- --outDir=/app/dist --base=/

# ==========================================
# Stage 2: Runtime (nginx)
# ==========================================
FROM nginx:alpine

# Copy custom nginx config
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1000 -S nginx-user && \
    adduser -u 1000 -S nginx-user -G nginx-user && \
    chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown nginx-user:nginx-user /var/run/nginx.pid

# Switch to non-root user
USER nginx-user

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:8080/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
