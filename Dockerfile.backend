# Movie Genie Backend Dockerfile
# Multi-stage build for optimized production image

# ==========================================
# Stage 1: Builder
# ==========================================
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml README.md ./
COPY movie_genie/__init__.py movie_genie/__init__.py

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install dependencies (install all optional dependencies for production)
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -e ".[ml,llm]"

# ==========================================
# Stage 2: Runtime
# ==========================================
FROM python:3.11-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r moviegenie && useradd -r -g moviegenie moviegenie

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --chown=moviegenie:moviegenie movie_genie/ ./movie_genie/
COPY --chown=moviegenie:moviegenie scripts/ ./scripts/
COPY --chown=moviegenie:moviegenie configs/ ./configs/
COPY --chown=moviegenie:moviegenie pyproject.toml README.md ./

# Create necessary directories
RUN mkdir -p logs data/processed models mlruns && \
    chown -R moviegenie:moviegenie /app

# Switch to non-root user
USER moviegenie

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    FLASK_ENV=production \
    FLASK_HOST=0.0.0.0 \
    FLASK_PORT=5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5001/api/health || exit 1

# Expose port
EXPOSE 5001

# Run application with gunicorn for production
CMD ["gunicorn", \
    "--bind", "0.0.0.0:5001", \
    "--workers", "4", \
    "--worker-class", "gthread", \
    "--threads", "2", \
    "--timeout", "120", \
    "--access-logfile", "-", \
    "--error-logfile", "-", \
    "--log-level", "info", \
    "movie_genie.backend.app:create_app()"]
